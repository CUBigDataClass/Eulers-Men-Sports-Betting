if (any(is.na(x[i,]))){
narows <- c(narows, i)
}
}
narows
x <- data.frame("SN" = 1:4, "Age" = c(21,NA, 15, 16), "Name" = c("John","Dora", "a", "B"))
narows <- c()
numrows <- dim(x)[1]
for (i in seq(1:numrows)) {
if (any(is.na(x[i,]))){
narows <- c(narows, i)
}
}
narows
x
x <- data.frame("SN" = 1:4, "Age" = c(21, NA, NA, 16), "Name" = c("John","Dora", "a", "B"))
narows <- c()
numrows <- dim(x)[1]
for (i in seq(1:numrows)) {
if (any(is.na(x[i,]))){
narows <- c(narows, i)
}
}
narows
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
data_path <- "/Users/Erik/Downloads/beat-the-bookie-odds-series-football-dataset/"
final_df <- fread(paste0(data_path, "games_full_odds.csv"))
final_df
final_df <- fread(paste0(data_path, "games_full_odds.csv")) %>% as_tibble()
final_df
# Explore data by league
freq_by_league <- final_df %>%
group_by(league) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
arrange(desc(freq)) %>%
mutate(cumsum_freq = cumsum(freq)) %>%
mutate(cumsum_n = cumsum(n))
freq_by_league
print(freq_by_league, n=20)
head(freq_by_league, n=20)
tail(freq_by_league, n=20)
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
data_path <- "/Users/nickvarberg/Downloads/beat-the-bookie-odds-series-football-dataset/"
# Read in data
df <- fread(paste0(data_path, "games_full_odds.csv")) %>% as_tibble()
data_path <- "/Users/Erik/Downloads/beat-the-bookie-odds-series-football-dataset/"
# Read in data
df <- fread(paste0(data_path, "games_full_odds.csv")) %>% as_tibble()
# Create outcome column {home, away, draw}
df <- df %>%
mutate(outcome = ifelse(score_home>score_away, "home", ifelse(score_away>score_home, "away", "draw")))
df
df$outcome
df
for (time in seq(0,1)) {
home_odds <- paste("home", as.character(time), sep="_")
away_odds <- paste("away", as.character(time), sep="_")
new_colm <- paste("home_away_diff", as.character(time), sep="_")
df <- df %>%
mutate(UQ(rlang::sym(new_colm)) :=  UQ(rlang::sym(home_odds)) - UQ(rlang::sym(away_odds)))
}
for (time in seq(0,71)) {
home_odds <- paste("home", as.character(time), sep="_")
away_odds <- paste("away", as.character(time), sep="_")
new_colm <- paste("home_away_diff", as.character(time), sep="_")
df <- df %>%
mutate(UQ(rlang::sym(new_colm)) :=  UQ(rlang::sym(home_odds)) - UQ(rlang::sym(away_odds)))
}
df
colnames(df)
head(df$home_away_diff_0)
head(df$away_0)
head(df$home_0)
num_differences = 8
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
tmp <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
tmp
ml_df <- df[c("outcome", predictors)]
"
predictors <- c("league", "home_team", "away_team", time_pts)
predictors <- c("league", "home_team", "away_team", time_pts)
ml_df <- df[c("outcome", predictors)]
time_pts
num_differences = 8
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
time_pts <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
predictors <- c("league", "home_team", "away_team", time_pts)
ml_df <- df[c("outcome", predictors)]
ml_df
72/12
72/6
# Filter data to leagues for which there are > games
freq_by_league <- df %>%
group_by(league) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
arrange(desc(freq)) %>%
mutate(cumsum_freq = cumsum(freq)) %>%
mutate(cumsum_n = cumsum(n))
leagues_many_games <- freq_by_league %>% filter(n>=game_num_thresh)
game_num_thresh <- 100
leagues_many_games <- freq_by_league %>% filter(n>=game_num_thresh)
leagues_many_games
tmp <- df %>% filter(league %in% leagues_many_games$league)
game_num_thresh <- 200
game_num_thresh <- 200
leagues_many_games <- freq_by_league %>% filter(n>=game_num_thresh)
tmp <- df %>% filter(league %in% leagues_many_games$league)
game_num_thresh <- 100
leagues_many_games <- freq_by_league %>% filter(n>=game_num_thresh)
df
df <- df %>% filter(league %in% leagues_many_games$league)
# Select a subset of the odds differences
num_differences = 6
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
time_pts <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", time_pts)
ml_df <- df[c("outcome", predictors)]
getwd()
?setwd
setwd("/Users/Erik/Desktop/Eulers-Men-Sports-Betting/DataPreprocessing/")
write.csv(ml_df, file = "ml_df.csv")
write.csv(ml_df, file = "ml_df.csv", row.names=FALSE)
dim(time_pts)
time_pts
df
# Select a subset of the odds differences
num_differences = 6
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds_diffs <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds_diffs <- c(odds_diffs, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds_diffs
# Select a subset of the odds differences
num_differences = 8
# Select a subset of the odds differences
num_differences = 8
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds_diffs <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds_diffs <- c(odds_diffs, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds_diffs
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", time_pts)
ml_df <- df[c("outcome", predictors)]
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", odds_diffs)
ml_df <- df[c("outcome", predictors)]
write.csv(ml_df, file = "ml_df.csv", row.names=FALSE)
# Select a subset of the odds differences
num_differences = 12
72/num_differences
# Select a subset of the odds differences
num_differences = 16
72/num_differences
# Select a subset of the odds differences
num_differences = 12
72/num_differences
# Select a subset of the odds differences
num_differences = 12
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
# Select a subset of the odds differences
num_differences = 12
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
# Select a subset of the odds differences
num_differences = 12
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("away", time, sep="_")))
odds
72/14
72/16
72/18
# Select a subset of the odds differences
num_differences = 18
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("home", time, sep="_")))
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", odds_diffs)
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("away", time, sep="_")))
odds
72/3
# Select a subset of the odds differences
num_differences = 18
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("away", time, sep="_")))
odds
time_pts
# Select a subset of the odds differences
num_differences = 18
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
ods
odds
odds <- c(odds_diffs, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
# Test code
num_differences = 18
72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("away", time, sep="_")))
time_pts
odds <- c(odds, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds
dim(df)[1]
sample(c(TRUE,FALSE), 10)
?sample
sample(c(TRUE,FALSE), 10, replace=TRUE)
floor(2.5)
dim(df)[1]*0.05
mtcars
dim(mtcars)
sample_frac(mtcars, 0.1)
sample_frac(seq(1,dim(mtcars)[1]), 0.1)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,dim(mtcars)[1]), floor(0.15*dim(mtcars)[1]), replace=FALSE)
sample(seq(1,10), floor(0.2*10), replace=FALSE)
sample(seq(1,10), floor(0.2*10), replace=FALSE)
sample(seq(1,10), floor(0.2*10), replace=FALSE)
x <- sample(seq(1,10), floor(0.2*10), replace=FALSE)
x
x
x <- sample(seq(1,10), floor(0.2*10), replace=FALSE)
x
seq(1,10)-x
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
sample(c(TRUE,FALSE), size=10, replace=TRUE, prob=c(0.9,0.1))
?rep
rep(2,7)
bool_index <- rep(TRUE, dim(df)[1])
nrows(df)
nrows(df)
nrow(df)
nrows <- nrow(df)
nrows <- 10
bool_index <- rep(TRUE, nrows)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
# Create a test and validation dataframe
percent_validation <- 0.15
nrows <- nrow(df)
nrows <- 10
bool_index <- rep(TRUE, nrows)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
valid_indices
bool_index
dices <- sample(seq(1,nrows), size=floor(p
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
valid_indices
bool_index[valid_indices] <- FALSE
bool_index
~bool_index
-bool_index
!bool_index
tmp <- df[bool_index, ]
# nrows <- 10
bool_index <- rep(TRUE, nrows)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
# Create a test and validation dataframe
percent_validation <- 0.15
nrows <- nrow(df)
# nrows <- 10
bool_index <- rep(TRUE, nrows)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
bool_index[valid_indices] <- FALSE
tmp <- df[bool_index, ]
nrows*percent_validation
nrows - nrows*percent_validation
df_valid <- df[!bool_index,]
nrows*percent_validation
# Functions used
construct_ml_df <- function(df, num_differences) {
# num_differences = 18
# 72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("away", time, sep="_")))
# time_pts
# odds
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", odds_diffs)
ml_df <- df[c("outcome", predictors)]
return(ml_df)
}
df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
# Select a subset of the odds differences
num_diff = 18
df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
df_test <- df[bool_index,]
df_valid <- df[!bool_index,]
nrows - nrows*percent_validation
nrows*percent_validation
# Select a subset of the odds differences
num_diff = 18
df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
df_test
df_test
colnames(df_test)
# Functions used
construct_ml_df <- function(df, num_differences) {
# num_differences = 18
# 72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("away", time, sep="_")))
# time_pts
# odds
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", odds)
ml_df <- df[c("outcome", predictors)]
return(ml_df)
}
# Select a subset of the odds differences
num_diff = 18
df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
setwd("/Users/Erik/Desktop/Eulers-Men-Sports-Betting/DataPreprocessing/")
data_path <- "/Users/Erik/Downloads/beat-the-bookie-odds-series-football-dataset/"
# Read in data
df <- fread(paste0(data_path, "games_full_odds.csv")) %>% as_tibble()
# Create outcome column {home, away, draw}
df <- df %>%
mutate(outcome = ifelse(score_home>score_away, "home", ifelse(score_away>score_home, "away", "draw")))
# df <- data.frame(home_0=rnorm(5), home_1=rnorm(5), away_0=rnorm(5), away_1=rnorm(5)) %>% as_tibble()
df
# Create columns for odds differences
for (time in seq(0,71)) {
home_odds <- paste("home", as.character(time), sep="_")
away_odds <- paste("away", as.character(time), sep="_")
new_colm <- paste("home_away_diff", as.character(time), sep="_")
df <- df %>%
mutate(UQ(rlang::sym(new_colm)) :=  UQ(rlang::sym(home_odds)) - UQ(rlang::sym(away_odds)))
}
# Filter data to leagues for which there are > games
freq_by_league <- df %>%
group_by(league) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
arrange(desc(freq)) %>%
mutate(cumsum_freq = cumsum(freq)) %>%
mutate(cumsum_n = cumsum(n))
head(freq_by_league, n=20)
tail(freq_by_league, n=20)
game_num_thresh <- 100
leagues_many_games <- freq_by_league %>% filter(n>=game_num_thresh)
df <- df %>% filter(league %in% leagues_many_games$league)
# Create a test and validation dataframe
percent_validation <- 0.15
nrows <- nrow(df)
# nrows <- 10
bool_index <- rep(TRUE, nrows)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
bool_index[valid_indices] <- FALSE
df_test <- df[bool_index,]
df_valid <- df[!bool_index,]
nrows - nrows*percent_validation
nrows*percent_validation
# Select a subset of the odds differences
num_diff = 18
df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
df_valid <- construct_ml_df(df=df_valid, num_differences=num_diff)
# Functions used
construct_ml_df <- function(df, num_differences) {
# num_differences = 18
# 72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("away", time, sep="_")))
# time_pts
# odds
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", odds)
ml_df <- df[c("outcome", predictors)]
return(ml_df)
}
df_test
df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
df_valid <- construct_ml_df(df=df_valid, num_differences=num_diff)
colnames(df_test)
colnames(df_valid)
rm(list=ls())
gc()
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
setwd("/Users/Erik/Desktop/Eulers-Men-Sports-Betting/DataPreprocessing/")
data_path <- "/Users/Erik/Downloads/beat-the-bookie-odds-series-football-dataset/"
# Read in data
df <- fread(paste0(data_path, "games_full_odds.csv")) %>% as_tibble()
# df <- data.frame(home_0=rnorm(5), home_1=rnorm(5), away_0=rnorm(5), away_1=rnorm(5)) %>% as_tibble()
df
# Create columns for odds differences
for (time in seq(0,71)) {
home_odds <- paste("home", as.character(time), sep="_")
away_odds <- paste("away", as.character(time), sep="_")
new_colm <- paste("home_away_diff", as.character(time), sep="_")
df <- df %>%
mutate(UQ(rlang::sym(new_colm)) :=  UQ(rlang::sym(home_odds)) - UQ(rlang::sym(away_odds)))
}
# Filter data to leagues for which there are > games
freq_by_league <- df %>%
group_by(league) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
arrange(desc(freq)) %>%
mutate(cumsum_freq = cumsum(freq)) %>%
mutate(cumsum_n = cumsum(n))
head(freq_by_league, n=20)
tail(freq_by_league, n=20)
game_num_thresh <- 100
# Create outcome column {home, away, draw}
df <- df %>%
mutate(outcome = ifelse(score_home>score_away, "home", ifelse(score_away>score_home, "away", "draw")))
leagues_many_games <- freq_by_league %>% filter(n>=game_num_thresh)
df <- df %>% filter(league %in% leagues_many_games$league)
# Create a test and validation dataframe
percent_validation <- 0.15
nrows <- nrow(df)
# nrows <- 10
bool_index <- rep(TRUE, nrows)
valid_indices <- sample(seq(1,nrows), size=floor(percent_validation*nrows), replace=FALSE)
bool_index[valid_indices] <- FALSE
df_test <- df[bool_index,]
df_valid <- df[!bool_index,]
# Functions used
construct_ml_df <- function(df, num_differences) {
# num_differences = 18
# 72/num_differences
time_pts <- c(0, seq(1,72/num_differences)*num_differences-1)
odds <- map_chr(time_pts, function(time) paste("home_away_diff", time, sep="_"))
odds <- c(odds, map_chr(time_pts, function(time) paste("draw", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("home", time, sep="_")))
odds <- c(odds, map_chr(time_pts, function(time) paste("away", time, sep="_")))
# time_pts
# odds
# Construct data frame for ML with outcome and predictors
predictors <- c("league", "home_team", "away_team", odds)
ml_df <- df[c("outcome", predictors)]
return(ml_df)
}
# Select a subset of the odds differences
num_diff = 18
ml_df_test <- construct_ml_df(df=df_test, num_differences=num_diff)
ml_df_valid <- construct_ml_df(df=df_valid, num_differences=num_diff)
colnames(df_test)
colnames(df_valid)
colnames(ml_df_test)
colnames(ml_df_valid)
write.csv(ml_df_test, file = "ml_df_test.csv", row.names=FALSE)
write.csv(ml_df_valid, file = "ml_df_valid.csv", row.names=FALSE)
df <- fread(paste0(data_path, "games_full_odds.csv")) %>% as_tibble()
summary(df)
